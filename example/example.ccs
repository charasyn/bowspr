import asm65816
import ccexpand
import cc_asmcall
import Bowspr
import movscr_codes

command create(sprite, mov_addr) {
    LDA_i(sprite)
    LDX_i(short [0] mov_addr)
    STX_d(0x0e)
    LDX_i(short [1] mov_addr)
    STX_d(0x10)
    JSL(ASM_BowsprCreateEntity)
}

// This goes first in the file so CCScript will put it at the start
atm_card_asm: M_EB_Function_Wrapper({
    // Autodetect VRAM and Palette settings
    LDA_i(0)
    TAX
    JSL(ASM_BowsprBegin)

    create(1, test_ness)
    create(2, test_paula)
    create(3, test_jeff)
    create(4, test_poo)
    create(1, test_5)
    create(2, test_6)
    create(3, test_7)
    create(4, test_8)
    BText(MiddleText)

    JSL(ASM_BowsprEnd)
})
MiddleText:
    newline
    "@This is a lot of text being printed while stuff is moving."
    pause(68)
    "[1f 61]"
    newline
    "@Done!|||||"
    eob

define WAIT_FRAMES = 1
test_ness: {
    m_set_xpos(260)
    m_set_ypos(88)
    m_ondraw(0x9ff0) // NOP - Don't draw us yet
    m_set_var7(0)
    m_get_var7
    m_asmcall(asm_write_letterbox_regs)
    m_set_result(2)
    m_asmcall(0xc429e8)
    m_loop(34)
        m_add_var7(2)
        m_get_var7
        m_asmcall(asm_write_letterbox_regs)
        m_pause(1)
    m_endloop
    m_unlock_text
    m_pause(1)
    m_set_mem16(0x9641,0)
    m_jsl(common)
    m_ondraw(0x9ff0) // NOP - Don't draw us yet
    m_set_var7(68)
    m_loop(34)
        m_add_var7(-2)
        m_get_var7
        m_asmcall(asm_write_letterbox_regs)
        m_pause(1)
    m_endloop
    m_and_mem8(0x001f,0xfd)
    m_unlock_text
    m_end
}
asm_write_letterbox_regs: {
    INC
    STA_a(0xadb2)
    DEC
    PHA
    LDA_i(224)
    SEC
    SBC_s(1)
    STA_a(0xadb4)
    JSL(0xc2d0ac)
    PLA
    RTL
}
test_paula: {
    m_set_xpos(280)
    m_set_ypos(88)
    m_ondraw(0x9ff0) // NOP - Don't draw us yet
    m_jsl(wait_for_unlock)
    m_jsl(common)
    m_end
}
test_jeff: {
    m_set_xpos(300)
    m_set_ypos(88)
    m_ondraw(0x9ff0) // NOP - Don't draw us yet
    m_jsl(wait_for_unlock)
    m_jsl(common)
    m_end
}
test_poo: {
    m_set_xpos(320)
    m_set_ypos(88)
    m_ondraw(0x9ff0) // NOP - Don't draw us yet
    m_jsl(wait_for_unlock)
    m_jsl(common)
    m_end
}
test_5: {
    m_set_xpos(340)
    m_set_ypos(88)
    m_ondraw(0x9ff0) // NOP - Don't draw us yet
    m_jsl(wait_for_unlock)
    m_jsl(common)
    m_end
}
test_6: {
    m_set_xpos(360)
    m_set_ypos(88)
    m_ondraw(0x9ff0) // NOP - Don't draw us yet
    m_jsl(wait_for_unlock)
    m_jsl(common)
    m_end
}
test_7: {
    m_set_xpos(380)
    m_set_ypos(88)
    m_ondraw(0x9ff0) // NOP - Don't draw us yet
    m_jsl(wait_for_unlock)
    m_jsl(common)
    m_end
}
test_8: {
    m_set_xpos(400)
    m_set_ypos(88)
    m_ondraw(0x9ff0) // NOP - Don't draw us yet
    m_jsl(wait_for_unlock)
    m_jsl(common)
    m_end
}

wait_for_unlock: {
    m_pause(1)
    m_get_mem16(0x9641)
    m_jeq(wait_for_unlock)
    m_pause(1)
    m_rtl
}

common: {
    m_ontick_nop
    m_priority(0)
    m_onmove(0xC09FC8) // Apply XY velocity
    m_onposition(0xC0A0BB) // Position relative to screen
    m_ondraw(0xC0A3A4) // Usual draw code
    m_set_var0(1)
    m_loop(12)
        m_jsl(go_in_circle)
    m_endloop
    m_set_xvel(0)
    m_set_yvel(0)
    m_asmcall (0xC020F1)
    m_rtl
}
go_in_circle: {
m_set_xvel(713) m_set_yvel(0) m_set_facing_anim(2,0) m_pause(WAIT_FRAMES)
m_set_xvel(701) m_set_yvel(133) m_set_facing_anim(2,0) m_pause(WAIT_FRAMES)
m_set_xvel(666) m_set_yvel(262) m_set_facing_anim(2,1) m_pause(WAIT_FRAMES)
m_set_xvel(608) m_set_yvel(385) m_set_facing_anim(3,1) m_pause(WAIT_FRAMES)
m_set_xvel(528) m_set_yvel(498) m_set_facing_anim(3,0) m_pause(WAIT_FRAMES)
m_set_xvel(429) m_set_yvel(600) m_set_facing_anim(3,0) m_pause(WAIT_FRAMES)
m_set_xvel(314) m_set_yvel(686) m_set_facing_anim(3,1) m_pause(WAIT_FRAMES)
m_set_xvel(184) m_set_yvel(756) m_set_facing_anim(3,1) m_pause(WAIT_FRAMES)
m_set_xvel(43) m_set_yvel(806) m_set_facing_anim(4,0) m_pause(WAIT_FRAMES)
m_set_xvel(-104) m_set_yvel(838) m_set_facing_anim(4,0) m_pause(WAIT_FRAMES)
m_set_xvel(-256) m_set_yvel(848) m_set_facing_anim(4,1) m_pause(WAIT_FRAMES)
m_set_xvel(-407) m_set_yvel(838) m_set_facing_anim(4,1) m_pause(WAIT_FRAMES)
m_set_xvel(-554) m_set_yvel(806) m_set_facing_anim(4,0) m_pause(WAIT_FRAMES)
m_set_xvel(-695) m_set_yvel(756) m_set_facing_anim(5,0) m_pause(WAIT_FRAMES)
m_set_xvel(-825) m_set_yvel(686) m_set_facing_anim(5,1) m_pause(WAIT_FRAMES)
m_set_xvel(-940) m_set_yvel(600) m_set_facing_anim(5,1) m_pause(WAIT_FRAMES)
m_set_xvel(-1039) m_set_yvel(498) m_set_facing_anim(5,0) m_pause(WAIT_FRAMES)
m_set_xvel(-1119) m_set_yvel(385) m_set_facing_anim(5,0) m_pause(WAIT_FRAMES)
m_set_xvel(-1177) m_set_yvel(262) m_set_facing_anim(6,1) m_pause(WAIT_FRAMES)
m_set_xvel(-1212) m_set_yvel(133) m_set_facing_anim(6,1) m_pause(WAIT_FRAMES)
m_set_xvel(-1224) m_set_yvel(0) m_set_facing_anim(6,0) m_pause(WAIT_FRAMES)
m_set_xvel(-1212) m_set_yvel(-132) m_set_facing_anim(6,0) m_pause(WAIT_FRAMES)
m_set_xvel(-1177) m_set_yvel(-261) m_set_facing_anim(6,1) m_pause(WAIT_FRAMES)
m_set_xvel(-1119) m_set_yvel(-384) m_set_facing_anim(7,1) m_pause(WAIT_FRAMES)
m_set_xvel(-1039) m_set_yvel(-497) m_set_facing_anim(7,0) m_pause(WAIT_FRAMES)
m_set_xvel(-940) m_set_yvel(-599) m_set_facing_anim(7,0) m_pause(WAIT_FRAMES)
m_set_xvel(-825) m_set_yvel(-685) m_set_facing_anim(7,1) m_pause(WAIT_FRAMES)
m_set_xvel(-695) m_set_yvel(-755) m_set_facing_anim(7,1) m_pause(WAIT_FRAMES)
m_set_xvel(-554) m_set_yvel(-805) m_set_facing_anim(0,0) m_pause(WAIT_FRAMES)
m_set_xvel(-407) m_set_yvel(-837) m_set_facing_anim(0,0) m_pause(WAIT_FRAMES)
m_set_xvel(-256) m_set_yvel(-847) m_set_facing_anim(0,1) m_pause(WAIT_FRAMES)
m_set_xvel(-104) m_set_yvel(-837) m_set_facing_anim(0,1) m_pause(WAIT_FRAMES)
m_set_xvel(43) m_set_yvel(-805) m_set_facing_anim(0,0) m_pause(WAIT_FRAMES)
m_set_xvel(184) m_set_yvel(-755) m_set_facing_anim(1,0) m_pause(WAIT_FRAMES)
m_set_xvel(314) m_set_yvel(-685) m_set_facing_anim(1,1) m_pause(WAIT_FRAMES)
m_set_xvel(429) m_set_yvel(-599) m_set_facing_anim(1,1) m_pause(WAIT_FRAMES)
m_set_xvel(528) m_set_yvel(-497) m_set_facing_anim(1,0) m_pause(WAIT_FRAMES)
m_set_xvel(608) m_set_yvel(-384) m_set_facing_anim(1,0) m_pause(WAIT_FRAMES)
m_set_xvel(666) m_set_yvel(-261) m_set_facing_anim(2,1) m_pause(WAIT_FRAMES)
m_set_xvel(701) m_set_yvel(-132) m_set_facing_anim(2,1) m_pause(WAIT_FRAMES)
    m_rtl
}

// ================================================================================================

// Make Tracy say our custom text.
// If using CoilSnake, make the following change:
// In npc_config_table.yml, change entry 30's Text Pointer 1 to "example.tracy_text"
ROM[0xc66aa4] = { goto(tracy_text) }
tracy_text: {
    "@Test battle time?" newline
    "[19 02]Yes[02][19 02]No[02][1C 07 02][11]{clearline}[09 02 {long giygas_time} {long no_giygas_time}]"
no_giygas_time:
    "@Ok/ maybe later.| Cya" next
    eob
giygas_time:
    // Start battle with enemy group 400:
    // Major Psychic Psycho and Soul Consuming Flame
    window_close(1)
    // cc_asmcall(setup_giygas, RET_NONE)
    "[1f 23 {short 400}]"
    window_open(1)
    "@Ok cool. Good job bro." next
    eob
}
setup_giygas: {
    LDA_i(0x0004)
    STA_a(0xA97A)
    RTL
}
// Overwrite ATM card battle routine with our code
// If using CoilSnake, make the following changes:
// In item_configuration_table.yml:
//   change item 177's Type to 53
// In battle_action_table.yml:
//   change action 197's Text Address to "example.atm_card_text"
//   change action 197's Code Address to "example.atm_card_asm"
ROM[0xD584A8] = long atm_card_text
ROM[0xD584AC] = long atm_card_asm
ROM[0xD56B10] = byte 0x35
atm_card_text: {
    newline
    "@{user}[19 1F]{swap} used the" linebreak
    "  secret debug device![03]" eob
}

////////////////////////////////////////////////////////////////////////////////
////// Setup CCScript stuff: "newgame" commands, hijacks and pointer overwrites

//// "Normal" CCScript commands
// Set Ness' initial position
newgame_location(7720, 360)
// Set the "Startup" text. This normally handles the whole
// Onett night-time flyover sequence.
newgame_startup(newgame_text_in_map)

//// New ASM patch that runs when a new game is created, but
//// before the map is loaded.
ROM[0xc1feb2] = {
    // We just call the new text block.
    MText(newgame_text_before_map)
    BRA(0) // 2-byte no-op
    // This skips the following:
    // - Set flag 11
    // - Disable NPCs
    // So if you want those things, make sure to do them yourselves!
    // Specifically, if you want to disable/enable NPCs, try this:
    // https://github.com/pk-hack/CoilSnake/wiki/CCScript-Library#enabledisable-all-npcs-by-cooprocks123e
}

//// Change a text pointer that is always called after loading a
//// save file but before loading the map.
_asmptr(0xC1FF1C, always_text_before_map)

////////////////////////////////////////////////////////////////////////////////
////// Actual text
newgame_text_before_map:
    // This is where you should set all your flags, especially if
    // you are adjusting some that affect the map.
    call(newgame_set_flags_to_post_meteor)
    // Add Paula
    "[1f 11 02]"
    // Set levels to 80
    "[1e 08 01 50]"
    "[1e 08 02 50]"
    eob

always_text_before_map:
    // Unset flag indicating that you just slept in a hotel.
    // If this is set, it will play the Good Morning music,
    // and you won't be able to sleep in the hotel again (without leaving).
    unset(flag 383)
    eob

newgame_text_in_map:
    // You probably want to save here!
    // This is the equivalent
    save
    eob

newgame_set_flags_to_post_meteor:
    unset(flag 11)  // Disable "peaceful mode"
    set(flag 20)    // Picky joined your party. Never unset
    set(flag 34)    // Post Starman Jr / Picky left party. Never unset
    set(flag 94)    // Seems to fix your mom
    unset(flag 95)  // Makes phones work (might already be unset)
    set(flag 98)    // Makes Ness's phone specifically work
    set(flag 100)   // King doesn't want to go outside
    set(flag 104)   // Pokey/Picky punished, first day events cleaned up
    unset(flag 107) // When on, primes sunrise transition exiting Pokey's house
    set(flag 199)   // Know how to call Ness's dad
    set(flag 200)   // Know how to call Ness's mom
    set(flag 209)   // Onett warp - necessary to have correct Mom text
    set(flag 375)   // Most Onett townsfolk
    set(flag 422)   // Onett daytime palette
    set(flag 469)   // Suppresses the day 1 townsfolk
    unset(flag 476) // Onett roadblocks
    unset(flag 477) // Ness head in his room
    set(flag 517)   // Ness's house's lights are on
    unset(flag 532) // No meteor sound in Ness' house
    unset(flag 533) // No meteor sound in Ness' room
    unset(flag 749) // No pajamas?
    eob
